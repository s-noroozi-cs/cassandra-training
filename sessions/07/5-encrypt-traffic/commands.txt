$ openssl version

$ keytool --version

$ where keytool

    java development kit path - JDK

## Sample Certificate Authority (CA) Configuration (ca.cnf)

======================================================


# Cassandra TLS Key and Certificate Samples

Here are examples of TLS/SSL configuration files for Apache Cassandra:

## Sample Certificate Authority (CA) Configuration (ca.cnf)

## Sample Node Certificate Configuration (node.cnf)


## Generating Certificates

1. **Generate CA certificate**:
    
    $ openssl req -x509 -newkey rsa:4096 -keyout ca-key.pem -out ca-cert.pem -days 365 -config ca.cnf -nodes


2. **Generate node key and CSR**:

    $ openssl req -newkey rsa:2048 -keyout node-key.pem -out node.csr -config node.cnf -nodes


3. **Sign node certificate with CA**:

    $ openssl x509 -req -in node.csr -CA ca-cert.pem -CAkey ca-key.pem -CAcreateserial -out node-cert.pem -days 365


## Cassandra Configuration (cassandra.yaml)

```yaml
client_encryption_options:
    enabled: true
    optional: false
    keystore: /path/to/cassandra.keystore
    keystore_password: keystore_password
    require_client_auth: true
    truststore: /path/to/cassandra.truststore
    truststore_password: truststore_password
    protocol: TLS
    algorithm: SunX509
    store_type: JKS
    cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA]
   
server_encryption_options:
    internode_encryption: all
    keystore: /path/to/cassandra.keystore
    keystore_password: keystore_password
    truststore: /path/to/cassandra.truststore
    truststore_password: truststore_password
    protocol: TLS
    algorithm: SunX509
    store_type: JKS
    cipher_suites: [TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA]
    require_client_auth: true
```

## Converting PEM to Java Keystore (JKS)


    # Create PKCS12 keystore
        
        $ openssl pkcs12 -export -in node-cert.pem -inkey node-key.pem -out node.p12 -name cassandra-node -CAfile ca-cert.pem -caname "Cassandra Root CA" -password pass:changeit

    # Convert to JKS format
        $ keytool -importkeystore -deststorepass changeit -destkeypass changeit -destkeystore cassandra.keystore -srckeystore node.p12 -srcstoretype PKCS12 -srcstorepass changeit -alias cassandra-node

    # Import CA certificate into truststore

        $ keytool -import -file ca-cert.pem -alias cassandra-ca -keystore cassandra.truststore -storepass changeit -noprompt


Note: Always secure your private keys and keystore passwords. These examples use simple passwords for demonstration - in production, use strong passwords and consider using a password manager or vault.

======================================================

update cassandra.yaml

client_encryption_options:
  enabled: true
  optional: false
  keystore: /etc/cassandra/keystore.jks
  keystore_password: changeit
  truststore: /etc/cassandra/truststore.jks
  truststore_password: changeit
  require_client_auth: true
  protocol: TLS
  cipher_suites: [TLS_AES_256_GCM_SHA384]


cqlsh --ssl --truststore=/etc/cassandra/truststore.jks \
  --truststore-password=changeit

create file "/root/.cassandra/cqlshrc" with following content
-------------------------------------------------
[connection]
factory = cqlshlib.ssl.ssl_transport_factory

[ssl]
validate = false
certfile = /usr/share/dse/ssl-conf/public.pem
-------------------------------------------------

copy ca-cert.pem to your container as public.pem

$ docker cp ca-cert.pem \
    cassandra:/usr/share/dse/ssl-conf/public.pem

$ docker exec -it cassandra bash

$ cqlsh  --ssl -u cassandra -p cassandra

to capture trafic using tcp dump

    $ sudo tcpdump -i any port 9042 -A -nn -vvv -l

also to prevent loopback connection using following 

$ cqlsh 192.168.1.3  --ssl -u cassandra -p cassandra



