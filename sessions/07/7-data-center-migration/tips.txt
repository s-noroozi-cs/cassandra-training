simulate a Cassandra cluster migration 
  between two data centers using Docker Compose, 
  including the migration process and shutdown of the old DC.

 --- Docker Compose Setup (2 DCs)

 --- Migration Process Simulation

Step 1: Start the initial cluster (DC1 only)
  $ docker compose up -d \
        dc1_n1 \
        dc1_n2

--- Wait for DC1 to initialize 
  check logs with 
    
    $ docker logs dc1_n1

    $ docker exec -it dc1_n1 nodetool status

Step 2: Create sample keyspace and data

  $ docker exec -it dc1_n1 cqlsh 
  
  cqlsh> CREATE KEYSPACE migration_ks WITH replication = { 'class': 'NetworkTopologyStrategy', 'DC1': 2 };

  cqlsh> CREATE TABLE migration_ks.users ( user_id uuid PRIMARY KEY, username text, email text );

  cqlsh> INSERT INTO migration_ks.users (user_id, username, email) VALUES (uuid(), 'user1', 'user1@example.com');

  cqlsh> INSERT INTO migration_ks.users (user_id, username, email)    VALUES (uuid(), 'user2', 'user2@example.com');

Step 3: Add DC2 to the cluster

  $ docker-compose up -d dc2_n1 dc2_n2


### Step 4: Update keyspace replication to include DC2
```bash
docker exec -it cassandra-dc1-seed cqlsh -e "
ALTER KEYSPACE migration_ks WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'DC1': 3,
  'DC2': 3
};
"
```

### Step 5: Rebuild DC2 nodes from DC1
```bash
for node in cassandra-dc2-seed cassandra-dc2-node1 cassandra-dc2-node2; do
  docker exec -it $node nodetool rebuild -- DC1
done
```

### Step 6: Verify data replication
```bash
docker exec -it cassandra-dc2-seed cqlsh -e "SELECT * FROM migration_ks.users;"
```

### Step 7: Update client connections to prefer DC2
```bash
# This simulates client configuration change
docker exec -it cassandra-dc2-seed cqlsh -e "
ALTER KEYSPACE system_auth WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'DC1': 3,
  'DC2': 3
};
"
```

### Step 8: Shutdown old DC (DC1)
```bash
docker-compose stop cassandra-dc1-seed cassandra-dc1-node1 cassandra-dc1-node2
docker-compose rm -f cassandra-dc1-seed cassandra-dc1-node1 cassandra-dc1-node2
```

### Step 9: Final cleanup - remove DC1 from replication
```bash
docker exec -it cassandra-dc2-seed cqlsh -e "
ALTER KEYSPACE migration_ks WITH replication = {
  'class': 'NetworkTopologyStrategy',
  'DC2': 3
};
"
```

## 3. Verification

1. Check cluster status:
```bash
docker exec -it cassandra-dc2-seed nodetool status
```

2. Verify data is accessible:
```bash
docker exec -it cassandra-dc2-seed cqlsh -e "SELECT * FROM migration_ks.users;"
```

## Important Notes:

1. The migration process preserves all data while moving from DC1 to DC2
2. Clients connected to DC1 would need to be reconfigured to point to DC2
3. For production, you would want to:
   - Perform this during low-traffic periods
   - Monitor network bandwidth between DCs
   - Verify data consistency with `nodetool repair`

Would you like me to modify any part of this simulation to better match your specific requirements?