Monitoring Metrics

https://cassandra.apache.org/doc/5.0/cassandra/managing/operating/metrics.html


Monitoring Terminologies

    JVM Based Monitoring
        JMX

    Metrics
        JVM
            Garbage Collector Metrics
            Memory Metrics
            Threadpool Metrics
        Cassandra
            Table Metrics 
                Partition Size
                Tombstone Scanned
                SSTable Per Read
            Throughput
                Read  RPS : Client reads per second.
                Write RPS : Client writes per second.
            Latency
                Latency often acts as the canary in the coal mine 
                and monitoring latency gives you an early warning 
                about upcoming performance bottlenecks or a shift 
                in usage patterns. Latency can be impacted by 
                disk access, network latency or replication configuration.

                    * Total Read latency
                        Total response latency summed over all read requests.

                    * Total Write latency
                        Total response latency summed over all write requests.

                    * Read latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of read latency.

                    * Write latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of write latency.
            Compaction
                Completed compactions rate: Compaction tasks completed per second.
                Compaction tasks pending: Total pending compaction tasks in queue.
                Compaction data rate: Compaction rate


        System Metrics
            Disk Usage
            CPU Usage

Monitoring tools
    
    Prometheus
        handling time-series based data
    
    Grafana
        visualize any time-series metrics
    
    Cassandra Exporter
        collect and publish metrics
        replacement for the JMX metrics
        


    


cassandra-stress mixed duration=15m -rate threads=6



## Docker Compose Setup

## Prometheus Configuration

Create a `prometheus.yml` file:

```yaml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'cassandra-exporter'
    static_configs:
      - targets: ['cassandra-exporter:8080']
    scrape_interval: 10s
    metrics_path: /metrics

  - job_name: 'cassandra-jmx'
    static_configs:
      - targets: ['cassandra:7199']
    scrape_interval: 15s
```

## Grafana Provisioning

Create the directory structure and provisioning files:

```bash
mkdir -p grafana/provisioning/datasources
mkdir -p grafana/provisioning/dashboards
```

Create `grafana/provisioning/datasources/datasource.yml`:

```yaml
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
    version: 1
    editable: true
```

Create `grafana/provisioning/dashboards/dashboard.yml`:

```yaml
apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    editable: true
    options:
      path: /etc/grafana/provisioning/dashboards
```

## Cassandra Monitoring Dashboard

Create a basic dashboard file `grafana/provisioning/dashboards/cassandra.json`:

```json
{
  "dashboard": {
    "id": null,
    "title": "Cassandra Monitoring",
    "tags": ["cassandra", "monitoring"],
    "timezone": "browser",
    "panels": [
      {
        "id": 1,
        "title": "CPU Usage",
        "type": "stat",
        "targets": [
          {
            "expr": "process_cpu_seconds_total",
            "legendFormat": "CPU Time"
          }
        ],
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
      },
      {
        "id": 2,
        "title": "Memory Usage",
        "type": "stat",
        "targets": [
          {
            "expr": "process_resident_memory_bytes",
            "legendFormat": "Memory"
          }
        ],
        "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
      },
      {
        "id": 3,
        "title": "Active Connections",
        "type": "graph",
        "targets": [
          {
            "expr": "cassandra_client_request_total",
            "legendFormat": "Requests"
          }
        ],
        "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
      }
    ],
    "time": {
      "from": "now-6h",
      "to": "now"
    }
  }
}
```

## Alternative: Using JMX Exporter

If you prefer using JMX exporter, here's an alternative approach:

### Updated docker-compose.yml with JMX

```yaml
version: '3.8'

services:
  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
      - "7199:7199"
    environment:
      - CASSANDRA_CLUSTER_NAME=MonitoringCluster
      - JVM_OPTS=-javaagent:/opt/cassandra/jmx_prometheus_javaagent-0.18.0.jar=8080:/opt/cassandra/jmx_exporter.yml
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./jmx_exporter.yml:/opt/cassandra/jmx_exporter.yml
      - ./jmx_prometheus_javaagent-0.18.0.jar:/opt/cassandra/jmx_prometheus_javaagent-0.18.0.jar

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-jmx.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - cassandra

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  cassandra_data:
  prometheus_data:
  grafana_data:
```

### JMX Exporter Configuration

Create `jmx_exporter.yml`:

```yaml
rules:
  - pattern: ".*"
```

Download the JMX exporter agent:
```bash
wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.18.0/jmx_prometheus_javaagent-0.18.0.jar
```

## Usage Instructions

1. **Start the stack:**
   ```bash
   docker-compose up -d
   ```

2. **Access the services:**
   - **Grafana**: http://localhost:3000 (admin/admin)
   - **Prometheus**: http://localhost:9090
   - **Cassandra**: localhost:9042
   - **Cassandra Exporter**: http://localhost:8080/metrics

3. **Configure Grafana:**
   - Add Prometheus as data source (URL: http://prometheus:9090)
   - Import Cassandra dashboard or create your own

## Key Monitoring Metrics

### Essential Cassandra Metrics to Monitor:
- **Node metrics**: CPU, memory, disk usage
- **Read/Write latency**: Client request performance
- **Compaction metrics**: Pending tasks, bytes compacted
- **Storage metrics**: Disk space, SSTable count
- **JVM metrics**: Heap usage, GC activity
- **Cluster metrics**: Node status, gossip activity

### Useful Queries for Prometheus:
```promql
# Read latency
rate(cassandra_client_request_read_latency_seconds[5m])

# Write latency  
rate(cassandra_client_request_write_latency_seconds[5m])

# Pending compactions
cassandra_compaction_pending_tasks

# Heap usage
cassandra_jvm_memory_used_bytes{area="heap"}
```

This setup provides a comprehensive monitoring solution for Apache Cassandra using Docker Compose, giving you real-time insights into your cluster's performance and health.