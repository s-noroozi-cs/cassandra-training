Monitoring Metrics

https://cassandra.apache.org/doc/5.0/cassandra/managing/operating/metrics.html


Monitoring Terminologies

    JVM Based Monitoring
        JMX

    Metrics
        JVM
            Garbage Collector Metrics
            Memory Metrics
            Threadpool Metrics
        Cassandra
            Table Metrics 
                Partition Size
                Tombstone Scanned
                SSTable Per Read
            Throughput
                Read  RPS : Client reads per second.
                Write RPS : Client writes per second.
            Latency
                Latency often acts as the canary in the coal mine 
                and monitoring latency gives you an early warning 
                about upcoming performance bottlenecks or a shift 
                in usage patterns. Latency can be impacted by 
                disk access, network latency or replication configuration.

                    * Total Read latency
                        Total response latency summed over all read requests.

                    * Total Write latency
                        Total response latency summed over all write requests.

                    * Read latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of read latency.

                    * Write latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of write latency.
            Compaction
                Completed compactions rate: Compaction tasks completed per second.
                Compaction tasks pending: Total pending compaction tasks in queue.
                Compaction data rate: Compaction rate


        System Metrics
            Disk Usage
            CPU Usage

Monitoring tools
    
    Prometheus
        handling time-series based data
    
    Grafana
        visualize any time-series metrics
    
    Cassandra Exporter
        collect and publish metrics
        replacement for the JMX metrics
        


    


cassandra-stress mixed duration=15m -rate threads=6





2. **Access the services:**
   - **Grafana**: http://localhost:3000 (admin/admin)
   - **Prometheus**: http://localhost:9090
   - **Cassandra**: localhost:9042
   - **Cassandra Exporter**: http://localhost:8080/metrics

3. **Configure Grafana:**
   - Add Prometheus as data source (URL: http://prometheus:9090)
   - Import Cassandra dashboard or create your own

## Key Monitoring Metrics

### Essential Cassandra Metrics to Monitor:
- **Node metrics**: CPU, memory, disk usage
- **Read/Write latency**: Client request performance
- **Compaction metrics**: Pending tasks, bytes compacted
- **Storage metrics**: Disk space, SSTable count
- **JVM metrics**: Heap usage, GC activity
- **Cluster metrics**: Node status, gossip activity

### Useful Queries for Prometheus:
```promql
# Read latency
rate(cassandra_client_request_read_latency_seconds[5m])

# Write latency  
rate(cassandra_client_request_write_latency_seconds[5m])

# Pending compactions
cassandra_compaction_pending_tasks

# Heap usage
cassandra_jvm_memory_used_bytes{area="heap"}
```

This setup provides a comprehensive monitoring solution for Apache Cassandra using Docker Compose, giving you real-time insights into your cluster's performance and health.