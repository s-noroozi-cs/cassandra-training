Monitoring Metrics

https://cassandra.apache.org/doc/5.0/cassandra/managing/operating/metrics.html


Monitoring Terminologies

    JVM Based Monitoring
        JMX

    Metrics
        JVM
            Garbage Collector Metrics
            Memory Metrics
            Threadpool Metrics
        Cassandra
            Table Metrics 
                Partition Size
                Tombstone Scanned
                SSTable Per Read
            Throughput
                Read  RPS : Client reads per second.
                Write RPS : Client writes per second.
            Latency
                Latency often acts as the canary in the coal mine 
                and monitoring latency gives you an early warning 
                about upcoming performance bottlenecks or a shift 
                in usage patterns. Latency can be impacted by 
                disk access, network latency or replication configuration.

                    * Total Read latency
                        Total response latency summed over all read requests.

                    * Total Write latency
                        Total response latency summed over all write requests.

                    * Read latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of read latency.

                    * Write latency histogram
                        50th, 75th, 90th, 95th, 99th, 99.9th percentile values of write latency.
            Compaction
                Completed compactions rate: Compaction tasks completed per second.
                Compaction tasks pending: Total pending compaction tasks in queue.
                Compaction data rate: Compaction rate


        System Metrics
            Disk Usage
            CPU Usage

Monitoring tools
    
    Prometheus
        handling time-series based data
    
    Grafana
        visualize any time-series metrics
    
    Cassandra Exporter
        collect and publish metrics
        replacement for the JMX metrics
        



Why not provide the exporter as an agent for cassandra ?

    Safety: 
        The agent share the same jvm than cassandra itself and 
        I don't want metrics calls to be able to hammer down cassandra nodes.
    Safety: 
        If there is a bug/leak in the exporter itself it should not impact cassandra
    Maintainability: 
        Upgrading the exporter should not require to restart the cassandra cluster

Why cache metrics results, this is not the prometheus way ?
    Safety: 
        JMX is an heayweight RPC mechanism and some cassandra metrics 
        calls are expensive to scrap (i.e: snapshots size) as they trigger 
        some heavy operations for cassandra. Not caching results mean that 
        you can bring down your nodes by just requesting the metrics page

Why not make more use of labels, be more prometheus way ?
    Maintainability: 
        I want the exporter to be able to support multiple version of 
        cassandra (2.2.X/3.X/4.X) without having to hand tune the metrics 
        labels for each version of cassandra. Metrics path change 
        between versions of cassandra and I want to avoid the hustle 
        of having to maintain the mapping

Why this exporter is slower than jmx_exporter ?
    Maintainability: 
        When your cluster grow in number of nodes, 
        the cardinality of metrics start to put too much 
        pressure on Prometheus itself. A lot of this cardinality 
        is due to the not too much usefulness of metrics like 999th percentile 
        and others. This exporter let you choose to not export them, 
        which is not possible with jmx_exporter, but at the cost of a small 
        runtime penality in order to discover them. 
        So this exporter let you reach a bigger scale before you have to 
        rely on metric aggregation in order to scale more.
        Unless you have hundreds of tables, the scrap time will stay below 10sec

Why the exporter is not written in GO ?
    Cassandra metrics are only available trought JMX, which in turn is only accessible with Java.


path : /opt/cassandra/tools/
tool: cassandra-stress

1. ./cassandra-stress write n=10000000
2. ./cassandra-stress read n=10000000

https://freedium.cfd/https://medium.com/ksquare-inc/how-to-use-apache-cassandras-stress-tool-a-step-by-step-guide-649ea26daa5d


customizing exporter using config in env or config file

https://github.com/criteo/cassandra_exporter




Access the services:
    - **Grafana**: http://localhost:3000 (admin/admin)
    - **Prometheus**: http://localhost:9090
    - **Cassandra**: localhost:9042
    - **Cassandra Exporter**: http://localhost:8080/metrics


grafana manual dashboard

    datasource:     prometheus
    metric:         cassandra_stats
    label filter:   name    ***