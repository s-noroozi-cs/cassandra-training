CQL Commands

    The capture Command
        The CAPTURE command will capture the output of a command and add it to a text file, 
        as shown in the following example:

        cqlsh> capture 'path/to/the/file'

        Once you issue the CAPTURE command, the shell will capture the output of all 
        subsequent CQL commands that you issue in that session, until you turn off 
        the output capturing with the capture off command:
        
        cqlsh> capture off;

    The copy Command
        The COPY command is great for capturing the data from a Cassandra table to a text file. 
        
        cqlsh> copy employee (emp_id, emp_cicty, emp_name,emp_sal) to 'myfile';

    The describe Command
        The DESCRIBE command will describe various entities in a Cassandra cluster. 
        In the following example,the describe cluster command describes the Cassandra cluster 
        and its top-level objects:
  
        cqlsh> describe cluster;
            Cluster: Test Cluster
            Partitioner: Murmur3Partitioner
        
        You can get a description of several other entities with the DESCRIBE command:
            Describe types: Lists all user defined data types 
            Describe type: Describes a user defined data type 
            Describe tables: Lists all the tables in a keyspace 
            Describe table: Describes a table
            Describe keyspaces: Lists all keyspaces in a cluster

        Note The DESC command works the same as the DESCRIBE command.

    The expand Command
        The expand command shows the contents of a table’s rows vertically, 
        making it convenient to read long rows of data. 
        Instead of scrolling to the right, as in the case of the default horizontal format, 
        you scroll down to view more of a row.
        Let’s say your query results in the following output:

        cqlsh:mykeyspace1> select * from employee;
            emp_id | emp_city    | emp_name | emp_phone   |
            emp_sal
            --------+-------------+----------+-------------+---
            ------
                    1 | San Antonio |
            |   90000
            juan | 39874622562
            jim | 87209887521
            sam | 87361598012
            2 | | 100000
            3 | | 50000
            Houston |
            Austin |
            (3 rows)
            
            Now you would like to get a more detailed output. 
            You can do this by first issuing the expand on command in the cqlsh session,
            and following it up with your original command.

            cqlsh:mykeyspace1> expand on;
                Now Expanded output is enabled
            
            cqlsh:mykeyspace1> select * from employee;
            
            @ Row 1
            -----------+-------------
            emp_id    | 1
            emp_city  | San Antonio
            emp_name  | juan
            emp_phone | 39874622562
            emp_sal   | 90000
            
            @ Row 2
            -----------+-------------
            emp_id     | 2
            emp_city   | Houston 
            emp_name   | jim 
            emp_phone  | 87209887521 
            emp_sal    | 100000
            
            @ Row 3
            -----------+-------------
            emp_id     | 3
            emp_city   | Austin 
            emp_name   | sam 
            emp_phone  | 87361598012 
            emp_sal    | 50000
            (3 rows)

        Be sure to turn expanded output off once you’re done with it:

        cqlsh:mykeyspace1> expand off;
            Disabled Expanded output.

The nodetool Command

    
    Thenodetool status shows the status and state of a Cassandra cluster
        Status=Up/Down
        State=Normal/Leaving/Joining/Moving

    The nodetool info command,which shows information such as uptime and load, 
    helps you verify that the Cassandra instance is running properly.
    If this command nodetool hangs for over a minute or so, 
    it means there’s something wrong with your server’s network configuration.

There’s no Cassandra command to stop a running instance. 
If you started Cassandra in the foreground, press Control-C to stop Cassandra. 
If you started Cassandra in the background, you can stop the instance by using 
the Linux killcommand.

    to find process id and then kill it
        * $ sudo pgrep -f CassandraDaemon 
        * $ sudo ps auwx | grep cassandra
    or you can directly kill it
        $ sudo pkill –f CassandraDaemon
    Tip: stop server script that exist in cassandra home directory 
    does not stop anything, it only suggest that you read script before using it.

Clearing Cassandra Data
    Sometimes you may need to clear Cassandra data . 
    You may need to remove just the data in the data directory, 
    or from all default directories. 

    To clear the data from all default directories in a package installation, do the following:
        $ cd install_location
        $ rm –rf data/*
    
    This will remove data from the default directories, 
    including the commit log and the saved-caches directories.

    To remove just the data directory, do the following:
        $ sudo rm -rf data/data/*

Configuring cqlsh
    The cqlsh utility is highly configurable, and you can configure it via a 
        * dedicated configuration file 
        * or by choosing from several options at the command line.
    
    Configuring Through the cqlshrc Config File
        You can configure various properties in the cqlshrc file. 
        Cassandra provides a cqlshrc.sample file for you, and you can rename it to cqlshrc. 
        The cqlshrc.sample file is located in the $CASSANDRA_HOME/conf directory.

Running Commands from a File
    Often, you’ll want to run a set of commands one after the other. 
    At times like this, you can simply store all the commands in a text file.
    For example, the following two lines are in a file named myfile:
        
        use mykeyspace1
        select * from employees
    
    Once you create the text file with the cqlsh commands, 
    you can invoke the commands with the source command, as shown here:
        
        $ cqlsh> source  '/cassandra/test/myfile';

    by default cqlsh connect to localhost 9042 to chaning that:
        
        $ cqlsh {IP_ADDR} [SPACE] {PORT}

Getting the History of Your Commands
    
    You can get a history of all your CQLSH as well as Nodetool commands by 
    going to the directory named .cassandra under the /home directory of the user 
    as which you run these commands.
  
        $ cd ~/.cassandra
        $ ls
        ...
            cqlsh_history 
            nodetool.history
        ...

Deployment

    Memory
        minimum 8GB, but server should have at least 64GB to 512GB 

    CPU
        Cassandra is optimized for writing, so the CPU is the limiting factor for performance.
        DataStax recommends:  dedicated hardware with 16 cores processor. 

    Network
        The network needs to transmit vast chunks of data for both the read and write 
        activity and for data replication. The recommended bandwidth is 1GB or higher.

    Storage
        In most cases, Cassandra is designed to provide redundancy via multiple independent, 
        inexpensive servers. For this reason, using NFS or a SAN for data directories is 
        an antipattern and should typically be avoided. 
        Similarly, servers with multiple disks are often better served by using RAID0 or JBOD 
        than RAID1 or RAID5 - replication provided by Cassandra obsoletes the need for 
        replication at the disk layer, so it’s typically recommended that operators 
        take advantage of the additional throughput of RAID0 rather than protecting against 
        failures with RAID1 or RAID5.
        
        NFS, SAN, and NAS Not Advisable
            DataStax recommends that you not use SAN, NFS, or NAS storage for 
            Cassandra environments. DataStax also recommends that you not use 
            SAN or NAS storage for an on-premise Cassandra cluster.
            
            SAN
                SAN isn’t advisable due to the following reasons:
                SAN’s return on investment isn’t attractive in a Cassandra environment, 
                as you keep scaling the cluster.
                Since Cassandra’s I/O is often higher than the ability of the 
                array controller, SAN becomes a bottleneck, or even worse, becomes 
                a single point of failure.
                
                Despite SSD and high-speed networks, SAN adds latency to Cassandra’s operations.
                SAN transport, occurring simultaneously with Cassandra traffic, can saturate 
                your network, causing problems to all network users.
            
                If you must use SAN, you need expertise in investigating issues such 
                as SAN fiber saturation.
            
            NAS
                Network-attached storage (NAS) devices are not recommended 
                because they cause network bottlenecks due to high I/O wait times 
                for reads and writes. The bottlenecks may stem from router latency 
                as well as issues with the network interface cards (NICs) .
            
            NFS
                Finally, DataStax does not recommend Network File System (NFS) 
                storage due to its inconsistent behavior during the deletion 
                and moving of files.
    

    To optimize an Apache Cassandra installation, follow DataStax’s recommendations:

        Synchronize the Clock and Enable NTP
            Cassandra overwrites a column only if there’s a newer version with 
            a more recent timestamp. Synchronizing the clocks on all the nodes of 
            a cluster is thus critical. You can use NTP (Network Time Protocol ) 
            or another method for synchronizing the clocks.
            
            You must set up one of the cluster’s servers as an NTP server if your 
            cluster doesn’t have access to the Internet. Synchronize the network time 
            on all the cluster’s nodes by enabling the NTP daemon through 
            editing the /etc/sysconfig/ntpd file.

    
        Disable the zone_reclaim_mode on NUMA Systems
            To avoid potential performance problems, you must disable the zone_reclaim_mode. 
            Zone_reclaim_mode allows someone to set more or less aggressive approaches to 
            reclaim memory when a zone runs out of memory. If it is set to zero then 
            no zone reclaim occurs. Allocations will be satisfied from other zones / nodes 
            in the system.
            
            You can check if the mode is enabled by doing this:
            
            $ cat /proc/sys/vm/zone_reclaim_mode
            0

            If the output is not a zero , disable the mode with the following command:
            $ echo 0 > /proc/sys/vm/zone_reclaim_mode

        TCP Settings
            You need to bump up the default TCP settings, which are adequate only for 
            a small setup. For a busy production environment, with hundreds or thousands 
            of concurrent connections, you need to set the following values for the 
            TCP parameters by editing the /etc/sysctl.conf file:
  
            net.core.rmem_max = 16777216
            net.core.wmem_max = 16777216
            net.core.rmem_default = 16777216
            net.core.wmem_default = 16777216
            net.core.optmem_max = 40960
            net.ipv4.tcp_rmem = 4096 87380 16777216
            net.ipv4.tcp_wmem = 4096 65536 16777216

            You must reboot the Linux server for the new TCP settings to go into effect. 
            If you want to change the settings without restarting the server, 
            you can issue the following command:
  
            $ sudo sysctl –p /etc/sysctl.conf

        User Resource Limits
            You must set the following limits on various user resources, 
            in the /etc/security/limits.conf file:
  
            <cassandra_user> - memlock unlimited
            <cassandra_user> - nofile 100000
            <cassandra_user> - nproc 32768
            <cassandra_user> - as unlimited

            In addition, you also need to include the following setting:
            vm.max_map_count = 1048575

            If you are using a Red Hat-based Linux server, you must also set 
            the following nproc limit in the /etc/security/limits.d/90- nproc.conf file:
            
            cassandra_user  - nproc 32768

        PAM Security Settings
            For many Linux versions, you must enable the pam_limits.so module. 
            You do this by uncommenting the following line in the /etc/pam.d/su file:
  
            session  required  pam_limits.so

        Setting the Java Heap Size
            * CMS involves more time and effort to tune it, 
                whereas G1 is easy to configure and mostly tunes itself.
            * CMS is more appropriate for fixed workloads and G1 for workloads 
                that are frequently changing, with the cluster running different processes.
            * For smaller environments that use a heap size that’s less than 14GB 
                and where latency is a major concern, the recommended collector is CMS.
            * For environments that use a heap size of between 14GB-64GB, G1 is better 
                than CMS. 
            * Unlike CMS, which stops all application threads during garbage collection, 
                the G1 garbage collector’s threads scan the heap’s regions and the collector 
                performs the heap compaction while the application threads are running.
            * You must set the heap size to something between 0.25 and 0.5 of the total 
                RAM on the server running the Cassandra instances.

        Disabling Swap
            To avoid a high latency due to swapping under low free-memory conditions, 
            you should disable swap entirely. Here is how you do it:

                $ sudo swapoff –all

            For this change to survive a reboot, you must also remove the swap file 
            related entries from the /etc/fstab file.

            By default, most Linux operating systems come with a default swappiness 
            setting of 60. If you set swappiness to zero, Linux will avoid using the 
            disk unless it runs out of memory, whereas setting it to 100 means that 
            the OS will instantly swap programs to disk. 
            
            As you can tell, a setting of 60 means that the OS will use the swap file 
            on disk often, starting from the time when the memory usage reaches around 
            half the OS RAM allocation. If you turn swappiness down to 10, for example, 
            the OS will use the swap file on disk only when the RAM usage is around 90 percent.

            The Linux administrator can change the system swappiness value by adding 
            the following to the /etc/sysctl.conf file:
  
                vm.swappiness=10

            The administrator must reboot the server for the new swappiness setting 
            to take effect. 
            
            There is no fixed rule on how low you must set the swappiness level; 
            many experts recommend setting it to 1.

        Setting the Limits

            Limit the cluster resources that users can utilize by setting shell limits. 
            You can do this by editing the /etc/security/limits.conf file, 
            
            Add the following lines to your /etc/security/limits.conf file:
                soft nofile 32768
                hard nofile 32768
                hard nproc  32768
                soft nproc  32768
                
            The nofile attribute limits the number of open descriptors per user process.
            The nproc specifies the maximum number of processes. 
            
            The soft limit settings connote warnings.
            the hard limit settings are the actual resource limits.

            

        
        

        