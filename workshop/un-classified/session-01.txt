download official cassandra docker image from docker hub

tip: At these time 5.0.3 was latest version

$ docker pull cassandra:5.0.3

$ docker run --name cassandra --rm -d cassandra:5.0.3

$ docker exec -it cassandra bash

tip: execute following command inside docker container

===> if ss, netstat does not work, please install net-tools package 
    
    --> apt-get install -y net-tools lsof

===> ss is alternative netstat 
$ ss --tcp --listening

===> t tcp, u udp, l listen, n numeric address 
$ ss -tuln 

9042 --> core service port
7000 --> gosip or brodcase cluster communication port


sample docker compose file
------------------------------- START OF FILE ------------------------------- 
version: '3'  #choose version as per your need

services:
  cassandra:
    image: cassandra:5.0.3
    container_name: cassandra-container
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
    volumes:
      - cassandra-data:/var/lib/cassandra

volumes:
  cassandra-data:
------------------------------- END OF FILE -------------------------------

sample cluster with 3 nodes
------------------------------- START OF FILE ------------------------------- 
version: "3.3"

networks:
  cassandra-net:
    driver: bridge

services:

  cassandra-1:
    image: "cassandra:5.0.3"
    container_name: "cassandra-1"
    ports:
      - 7000:7000
      - 9042:9042
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=my-datacenter-1
    volumes:
      - cassandra-node-1:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 5s
      start_period: 5s
      timeout: 10s
      retries: 20

  cassandra-2:
    image: "cassandra:5.0.3"
    container_name: "cassandra-2"
    ports:
      - 9043:9042
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=my-datacenter-1
      - CASSANDRA_SEEDS=cassandra-1
    depends_on:
      cassandra-1:
        condition: service_healthy
    volumes:
      - cassandra-node-2:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 5s
      start_period: 5s
      timeout: 10s
      retries: 20

  cassandra-3:
    image: "cassandra:5.0.3"
    container_name: "cassandra-3"
    ports:
      - 9044:9042
    networks:
      - cassandra-net
    environment:
      - CASSANDRA_START_RPC=true       # default
      - CASSANDRA_RPC_ADDRESS=0.0.0.0  # default
      - CASSANDRA_LISTEN_ADDRESS=auto  # default, use IP addr of container # = CASSANDRA_BROADCAST_ADDRESS
      - CASSANDRA_CLUSTER_NAME=my-cluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=my-datacenter-1
      - CASSANDRA_SEEDS=cassandra-1
    depends_on:
      cassandra-2:
        condition: service_healthy
    volumes:
      - cassandra-node-3:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: ["CMD-SHELL", "nodetool status"]
      interval: 5s
      start_period: 5s
      timeout: 10s
      retries: 20

volumes:
  cassandra-node-1:
  cassandra-node-2:
  cassandra-node-3:
------------------------------- END OF FILE -------------------------------

Use nodetool for check the status in all 3 nodes :

docker exec cassandra-xxx nodetool status


docker exec cassandra-xxx nodetool info

===== Cassandra Query Language =====

docker exec -it cassandra-1 bash

$ cqlsh

cqlsh> CREATE KEYSPACE IF NOT EXISTS store WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : '1' };

cqlsh> CREATE TABLE IF NOT EXISTS store.shopping_cart (
        userid text PRIMARY KEY,
        item_count int,
        last_update_timestamp timestamp
);

cqlsh> INSERT INTO store.shopping_cart
      (userid, item_count, last_update_timestamp)
      VALUES ('9876', 2, toTimeStamp(now()));

cqlsh> INSERT INTO store.shopping_cart
      (userid, item_count, last_update_timestamp)
      VALUES ('1234', 5, toTimeStamp(now()));

cqlsh> SELECT * FROM store.shopping_cart;

--------------------

docker exec -it cassandra-2 bash
$ cqlsh
cqlsh> SELECT * FROM store.shopping_cart;

-----------------

docker exec -it cassandra-3 bash
$ cqlsh
cqlsh> SELECT * FROM store.shopping_cart;


References:

https://www.baeldung.com/linux/docker-list-open-sockets-inside-container#:~:text=Using%20ss,detailed%20information%20about%20socket%20connections.&text=The%20output%20shows%20the%20listening,corresponding%20local%20addresses%20and%20ports.

https://medium.com/@shrutighoradkar101/setting-up-cassandra-with-docker-on-your-local-machine-a-step-by-step-guide-40cdc1a41359

https://medium.com/@kayvan.sol2/deploying-apache-cassandra-cluster-3-nodes-with-docker-compose-3634ef8345e8
